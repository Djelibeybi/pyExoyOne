{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CLI Reference","text":"<p>This page provides documentation for the <code>exoyone</code> command line tool.</p>"},{"location":"#exoyone","title":"exoyone","text":"<p>ExoyOne Command-Line Interface (CLI).</p> <p>Usage:</p> <pre><code>cli [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or\n                        customize the installation.\n</code></pre>"},{"location":"#get","title":"get","text":"<p>Get information from your ExoyOne.</p> <p>This includes the current state of the device, including power, color, effects, and more.</p> <p>Usage:</p> <pre><code>cli get [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  -H, --host TEXT  Hostname or IP address of your ExoyOne.  [env var:\n                   EXOYONE_HOST; required]\n</code></pre>"},{"location":"#color","title":"color","text":"<p>Get the current hue, saturation and brightness values.</p> <p>Usage:</p> <pre><code>cli get color [OPTIONS]\n</code></pre>"},{"location":"#cycle-speed","title":"cycle-speed","text":"<p>Get the current effect speed.</p> <p>Usage:</p> <pre><code>cli get cycle-speed [OPTIONS]\n</code></pre>"},{"location":"#device-name","title":"device-name","text":"<p>Get the device name.</p> <p>Usage:</p> <pre><code>cli get device-name [OPTIONS]\n</code></pre>"},{"location":"#direction","title":"direction","text":"<p>Get the effect direction (left/right).</p> <p>Usage:</p> <pre><code>cli get direction [OPTIONS]\n</code></pre>"},{"location":"#effect-speed","title":"effect-speed","text":"<p>Get the current effect speed.</p> <p>Usage:</p> <pre><code>cli get effect-speed [OPTIONS]\n</code></pre>"},{"location":"#effects","title":"effects","text":"<p>Get a list of effects for the specified mode pack or all mode packs.</p> <p>Usage:</p> <pre><code>cli get effects [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --mode-pack TEXT\n</code></pre>"},{"location":"#everything","title":"everything","text":"<p>Get the state and value of all the things.</p> <p>Usage:</p> <pre><code>cli get everything [OPTIONS]\n</code></pre>"},{"location":"#mode-cycle","title":"mode-cycle","text":"<p>Get mode cycle state (on/off).</p> <p>Usage:</p> <pre><code>cli get mode-cycle [OPTIONS]\n</code></pre>"},{"location":"#music-sync","title":"music-sync","text":"<p>Get music sync state (on/off).</p> <p>Usage:</p> <pre><code>cli get music-sync [OPTIONS]\n</code></pre>"},{"location":"#power-state","title":"power-state","text":"<p>Get the power state (on/off).</p> <p>Usage:</p> <pre><code>cli get power-state [OPTIONS]\n</code></pre>"},{"location":"#powerbank-mode","title":"powerbank-mode","text":"<p>Get powered by powerbank state (on/off).</p> <p>Usage:</p> <pre><code>cli get powerbank-mode [OPTIONS]\n</code></pre>"},{"location":"#scene-generation","title":"scene-generation","text":"<p>Get scene generation state (on/off).</p> <p>Usage:</p> <pre><code>cli get scene-generation [OPTIONS]\n</code></pre>"},{"location":"#shutdown-timer","title":"shutdown-timer","text":"<p>Get the current shutdown timer.</p> <p>Usage:</p> <pre><code>cli get shutdown-timer [OPTIONS]\n</code></pre>"},{"location":"#set","title":"set","text":"<p>Change things on your ExoyOne.</p> <p>This includes turning it on or off, changing the color, effect, and more.</p> <p>Usage:</p> <pre><code>cli set [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  -H, --host TEXT  Hostname or IP address of your ExoyOne.  [env var:\n                   EXOYONE_HOST; required]\n</code></pre>"},{"location":"#color_1","title":"color","text":"<p>Set the color by changing the hue, saturation and brightness.</p> <p>Usage:</p> <pre><code>cli set color [OPTIONS] [HUE] [SAT] [BRI]\n</code></pre> <p>Options:</p> <pre><code>  [HUE]   Hue value between 0 and 255.  [required]\n  [SAT]   Saturation value between 0 and 255.  [required]\n  [BRI]   Brightness value between 0 and 255.  [required]\n</code></pre>"},{"location":"#cycle-speed_1","title":"cycle-speed","text":"<p>Set the mode cycle duration in seconds.</p> <p>Usage:</p> <pre><code>cli set cycle-speed [OPTIONS] [SECONDS]\n</code></pre> <p>Options:</p> <pre><code>  [SECONDS]  Delay in seconds between cycles when mode cycle is on.\n             [required]\n</code></pre>"},{"location":"#device-name_1","title":"device-name","text":"<p>Set the device name of the ExoyOne.</p> <p>Usage:</p> <pre><code>cli set device-name [OPTIONS] [NAME]\n</code></pre> <p>Options:</p> <pre><code>  [NAME]  Custom name for the ExoyOne.  [required]\n</code></pre>"},{"location":"#direction_1","title":"direction","text":"<p>Set a direction for the active effect.</p> <p>There are only two directions. The list of options is provided for entertainment purposes, as the actual values are 0 and 1. Feel free to mix left with down, right with forward and so on.</p> <p>Usage:</p> <pre><code>cli set direction [OPTIONS] [this-way|that-way]\n</code></pre> <p>Options:</p> <pre><code>  [this-way|that-way]  Set the direction of the effect.  [required]\n</code></pre>"},{"location":"#effect","title":"effect","text":"<p>Change the active effect.</p> <p>Usage:</p> <pre><code>cli set effect [OPTIONS] [EFFECT]\n</code></pre> <p>Options:</p> <pre><code>  [EFFECT]  Name of the effect.  [required]\n</code></pre>"},{"location":"#effect-speed_1","title":"effect-speed","text":"<p>Set the speed of the effect.</p> <p>Usage:</p> <pre><code>cli set effect-speed [OPTIONS] [SPEED]\n</code></pre> <p>Options:</p> <pre><code>  [SPEED]  Effect speed  [required]\n</code></pre>"},{"location":"#mode-cycle_1","title":"mode-cycle","text":"<p>Turn mode cycle off or on.</p> <p>Usage:</p> <pre><code>cli set mode-cycle [OPTIONS] [off|on]\n</code></pre> <p>Options:</p> <pre><code>  [off|on]  Turn mode cycle off or on.  [required]\n</code></pre>"},{"location":"#music-sync_1","title":"music-sync","text":"<p>Turn music sync on or off.</p> <p>Usage:</p> <pre><code>cli set music-sync [OPTIONS] [off|on]\n</code></pre> <p>Options:</p> <pre><code>  [off|on]  Turn music sync off or on.  [required]\n</code></pre>"},{"location":"#power-state_1","title":"power-state","text":"<p>Turn power state on or off.</p> <p>Usage:</p> <pre><code>cli set power-state [OPTIONS] [off|on]\n</code></pre> <p>Options:</p> <pre><code>  [off|on]  Switch the power on or off  [required]\n</code></pre>"},{"location":"#powerbank-mode_1","title":"powerbank-mode","text":"<p>Turn powered by powerbank mode on or off.</p> <p>Usage:</p> <pre><code>cli set powerbank-mode [OPTIONS] [off|on]\n</code></pre> <p>Options:</p> <pre><code>  [off|on]  Switch powered by powerbank mode on or off  [required]\n</code></pre>"},{"location":"#restart-in-ap-mode","title":"restart-in-ap-mode","text":"<p>Restart the ExoyOne to enable Wi-Fi access point.</p> <p>Usage:</p> <pre><code>cli set restart-in-ap-mode [OPTIONS]\n</code></pre>"},{"location":"#scene-generation_1","title":"scene-generation","text":"<p>Turn scene generation off or on.</p> <p>Usage:</p> <pre><code>cli set scene-generation [OPTIONS] [off|on]\n</code></pre> <p>Options:</p> <pre><code>  [off|on]  Turn scene generation off or on.  [required]\n</code></pre>"},{"location":"#shutdown-timer_1","title":"shutdown-timer","text":"<p>Set the shutdown timer duration.</p> <p>Usage:</p> <pre><code>cli set shutdown-timer [OPTIONS] [MINUTES]\n</code></pre> <p>Options:</p> <pre><code>  [MINUTES]  Duration of shutdown timer from 5 to 480 minutes, 0 to disable.\n             [required]\n</code></pre>"},{"location":"library/","title":"Library Reference","text":"<p>Representation of an ExoyOne Light.</p> Source code in <code>src/exoyone/exoyone.py</code> <pre><code>class ExoyOne:\n    \"\"\"Representation of an ExoyOne Light.\"\"\"\n\n    TIMEOUT: ClassVar[float] = 3.0\n\n    def __init__(self, host: str, port: int = 8888) -&gt; None:\n        \"\"\"Initialize the ExoyOne library.\"\"\"\n        self._host = host\n        self._port = port\n        self._state: ExoyOneState\n        self._mp = ModePacks()\n\n    @property\n    def host(self) -&gt; str:\n        \"\"\"Return the hostname or IP address used to connect.\"\"\"\n        return self._host\n\n    @property\n    def name(self) -&gt; str:\n        \"\"\"Return either the user-defined name or mDNS name.\"\"\"\n        name = self._state.mdnsName\n        if len(self._state.userDefinedName) &gt; 0:\n            name = self._state.userDefinedName\n        return name\n\n    @property\n    def state(self) -&gt; ExoyOneState:\n        \"\"\"Returns the in-memory state of the ExoyOne.\"\"\"\n        return self._state\n\n    @property\n    def device_type(self) -&gt; str:\n        \"\"\"Return the device type.\"\"\"\n        device_type = ExoyDevices(self._state.type).name\n        return device_type.replace(\"_\", \" \").title()\n\n    @staticmethod\n    def _bool_val(value: bool | int | str) -&gt; int:\n        \"\"\"Return 1 for truthy state or 0 for falsy state.\"\"\"\n        if isinstance(value, int):\n            return value\n\n        if isinstance(value, str) and value.upper() in TruthyFalsyWords.__members__:\n            return TruthyFalsyWords[value.upper()].value\n\n        raise ExoyOneValueError(f\"Invalid value: {value}\")\n\n    @backoff.on_exception(\n        backoff.expo,\n        ExoyOneTimeoutError,\n        max_tries=3,\n        logger=_LOGGER,\n        backoff_log_level=logging.DEBUG,\n    )\n    async def async_set_data(\n        self, request: Mapping[str, Mapping[str, int | str] | bool | int | str]\n    ) -&gt; None:\n        \"\"\"Update a setting on the ExoyOne, then get the latest state data.\"\"\"\n        encoded_update = json.dumps(request).encode(\"utf-8\")\n        try:\n            stream: DatagramClient = await connect((self._host, self._port))\n            await asyncio.wait_for(stream.send(encoded_update), timeout=self.TIMEOUT)\n        except TimeoutError as exc:\n            raise ExoyOneTimeoutError() from exc\n        finally:\n            stream.close()\n            del stream\n            await self.async_get_data()\n\n    @backoff.on_exception(\n        backoff.expo,\n        ExoyOneTimeoutError,\n        max_tries=3,\n        logger=_LOGGER,\n        backoff_log_level=logging.DEBUG,\n    )\n    async def async_get_data(self) -&gt; None:\n        \"\"\"Update the in-memory state using data from the ExoyOne.\"\"\"\n        try:\n            stream: DatagramClient = await connect((self._host, self._port))\n            await asyncio.wait_for(stream.send(b'{\"getData\": 1}'), timeout=self.TIMEOUT)\n            reply, _ = await asyncio.wait_for(stream.recv(), timeout=self.TIMEOUT)\n            data = json.loads(reply.decode(\"utf-8\"))\n            self._state = ExoyOneState(**data)\n        except TimeoutError as exc:\n            raise ExoyOneTimeoutError() from exc\n        finally:\n            stream.close()\n            del stream\n\n    def get_active_pack_name(self) -&gt; str:\n        \"\"\"Return the name of the currently active modpack.\"\"\"\n        return self._mp.get_pack_name_from_index(self._state.currentModpack)\n\n    def get_active_effect(self) -&gt; str:\n        \"\"\"Return the name of the currently active effect.\"\"\"\n        return self._mp.get_effect_name_from_index(\n            pack_index=self._state.currentModpack,\n            effect_index=self._state.modeIndex,\n        )\n\n    async def async_get_state(self) -&gt; ExoyOneState:\n        \"\"\"Return the current state as an ExoyOne object.\"\"\"\n        await self.async_get_data()\n        return self._state\n\n    async def restart_in_ap_mode(self) -&gt; None:\n        \"\"\"Restart the device in AP mode.\"\"\"\n        await self.async_set_data({\"restartInApMode\": True})\n\n    async def toggle_power(self, state: bool | int | str) -&gt; None:\n        \"\"\"Toggle power.\"\"\"\n        request = {\"togglePower\": self._bool_val(state)}\n        await self.async_set_data(request)\n\n    async def toggle_direction(self, state: bool | int | str) -&gt; None:\n        \"\"\"Toggle direction.\"\"\"\n        request = {\"toggleDirection\": self._bool_val(state)}\n        await self.async_set_data(request)\n\n    async def _async_set_hsbs(self, key: str, value: int) -&gt; None:\n        \"\"\"Helper method to set hue, saturation, brightness and speed.\"\"\"\n        value = max(0, min(value, 255))\n        await self.async_set_data({key: value})\n\n    async def set_color(self, hsb: tuple[int, int, int]) -&gt; None:\n        \"\"\"Set the hue, saturation and brightness in a single call.\"\"\"\n        hue = max(0, min(hsb[0], 255))\n        saturation = max(0, min(hsb[1], 255))\n        brightness = max(0, min(hsb[2], 255))\n        await self.async_set_data(\n            {\n                \"setHue\": hue,\n                \"setSaturation\": saturation,\n                \"setBrightness\": brightness,\n            }\n        )\n\n    async def set_hue(self, hue: int) -&gt; None:\n        \"\"\"Set the hue.\"\"\"\n        await self._async_set_hsbs(key=\"setHue\", value=hue)\n\n    async def set_saturation(self, saturation: int) -&gt; None:\n        \"\"\"Set the saturation.\"\"\"\n        await self._async_set_hsbs(key=\"setSaturation\", value=saturation)\n\n    async def set_brightness(self, brightness: int) -&gt; None:\n        \"\"\"Set the brightness.\"\"\"\n        await self._async_set_hsbs(key=\"setBrightness\", value=brightness)\n\n    async def set_speed(self, speed: int) -&gt; None:\n        \"\"\"Set the speed.\"\"\"\n        await self._async_set_hsbs(key=\"setSpeed\", value=speed)\n\n    async def toggle_mode_cycle(self, state: bool | int | str) -&gt; None:\n        \"\"\"Toggle automatic mode change after set interval.\"\"\"\n        request = {\"toggleModeCycle\": self._bool_val(state)}\n        await self.async_set_data(request)\n\n    async def toggle_music_sync(self, state: bool | int | str) -&gt; None:\n        \"\"\"Toggle music sync.\"\"\"\n        request = {\"toggleMusicSync\": self._bool_val(state)}\n        await self.async_set_data(request)\n\n    async def set_cycle_speed(self, cycle_speed: int) -&gt; None:\n        \"\"\"Set cycle speed in seconds.\"\"\"\n        await self.async_set_data({\"setCycleSpeed\": cycle_speed})\n\n    async def set_effect(self, effect: str | tuple[int, int]) -&gt; None:\n        \"\"\"Set mode mode_pack and effect.\"\"\"\n        if isinstance(effect, str):\n            pack_index, effect_index = self._mp.get_indices_from_effect_name(effect)\n        else:\n            pack_index, effect_index = effect\n\n        if pack_index &gt; -1 and effect_index &gt; -1:\n            await self.async_set_data(\n                {\n                    \"setModPack\": pack_index,\n                    \"setEffect\": effect_index,\n                }\n            )\n\n    async def toggle_scene_generation(self, state: bool | int | str) -&gt; None:\n        \"\"\"Toggle scene generation.\"\"\"\n        request = {\"toggleSceneGeneration\": self._bool_val(state)}\n        await self.async_set_data(request)\n\n    async def set_name(self, name: str) -&gt; None:\n        \"\"\"Set a new user-friendly name.\"\"\"\n        if len(name) &gt; 39:\n            name = name[:39]\n            _LOGGER.warning(\"Name truncated to maximum allowed length: %s\", name[:39])\n        await self.async_set_data({\"setName\": name})\n\n    async def set_shutdown_timer(self, minutes: int) -&gt; None:\n        \"\"\"Set a shutdown timer of at least 5 and at most 480 minutes.\"\"\"\n        if minutes == 0:\n            _LOGGER.info(\"Disabling shutdown timer.\")\n\n        elif 1 &lt; minutes &lt; 5:\n            _LOGGER.info(\"Shutdown timer increased to 5 minutes.\")\n            minutes = 5\n\n        if minutes &gt; 480:\n            _LOGGER.info(\"Shutdown timer reduced to 8 hours.\")\n            minutes = 480\n\n        hours: int = 0\n        if minutes &gt; 60:\n            hours = minutes // 60\n            minutes = minutes % 60\n\n        await self.async_set_data(\n            {\"setShutdownTimer\": {\"hours\": hours, \"minutes\": minutes}}\n        )\n\n    async def connect_to_wifi(self, ssid: str, password: str) -&gt; None:\n        \"\"\"Set new Wi-Fi connection credentials.\"\"\"\n        if len(ssid) == 0 or len(password) == 0:\n            raise ExoyOneValueError(\n                \"Both SSID and password must be set to change WiFi credentials\"\n            )\n        if len(ssid) &gt; 31:\n            raise ExoyOneValueError(\n                \"SSID is longer than maximum allowed length of 31 characters\"\n            )\n        if len(password) &gt; 31:\n            raise ExoyOneValueError(\n                \"Password is longer than the maximum allowed length of 31 characters\"\n            )\n\n        await self.async_set_data(\n            {\"connectToWifi\": {\"ssid\": ssid, \"password\": password}}\n        )\n\n    async def powered_by_powerbank(self, state: bool | int | str) -&gt; None:\n        \"\"\"Toggle power consumption reduction when running on batteries.\"\"\"\n        request = {\"poweredByPowerbank\": self._bool_val(state)}\n        await self.async_set_data(request)\n\n    async def set_pattern(self, value: int) -&gt; None:\n        \"\"\"Use async_set_data to change the selectedPattern value.\"\"\"\n        await self.async_set_data({\"setPattern\": value})\n\n    async def set_palette(self, value: int) -&gt; None:\n        \"\"\"Use async_set_data to change the selectedPalette value.\"\"\"\n        await self.async_set_data({\"setPalette\": value})\n\n    async def set_render_mode(self, value: int) -&gt; None:\n        \"\"\"Use async_set_data to change the selectedRenderMode value.\"\"\"\n        await self.async_set_data({\"setRenderMode\": value})\n\n    async def set_color_mode(self, value: int) -&gt; None:\n        \"\"\"Use async_set_data to change the selectedColorMode value.\"\"\"\n        await self.async_set_data({\"setColorMode\": value})\n</code></pre>"},{"location":"library/#exoyone.exoyone.ExoyOne.device_type","title":"<code>device_type: str</code>  <code>property</code>","text":"<p>Return the device type.</p>"},{"location":"library/#exoyone.exoyone.ExoyOne.host","title":"<code>host: str</code>  <code>property</code>","text":"<p>Return the hostname or IP address used to connect.</p>"},{"location":"library/#exoyone.exoyone.ExoyOne.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>Return either the user-defined name or mDNS name.</p>"},{"location":"library/#exoyone.exoyone.ExoyOne.state","title":"<code>state: ExoyOneState</code>  <code>property</code>","text":"<p>Returns the in-memory state of the ExoyOne.</p>"},{"location":"library/#exoyone.exoyone.ExoyOne.__init__","title":"<code>__init__(host, port=8888)</code>","text":"<p>Initialize the ExoyOne library.</p> Source code in <code>src/exoyone/exoyone.py</code> <pre><code>def __init__(self, host: str, port: int = 8888) -&gt; None:\n    \"\"\"Initialize the ExoyOne library.\"\"\"\n    self._host = host\n    self._port = port\n    self._state: ExoyOneState\n    self._mp = ModePacks()\n</code></pre>"},{"location":"library/#exoyone.exoyone.ExoyOne.async_get_data","title":"<code>async_get_data()</code>  <code>async</code>","text":"<p>Update the in-memory state using data from the ExoyOne.</p> Source code in <code>src/exoyone/exoyone.py</code> <pre><code>@backoff.on_exception(\n    backoff.expo,\n    ExoyOneTimeoutError,\n    max_tries=3,\n    logger=_LOGGER,\n    backoff_log_level=logging.DEBUG,\n)\nasync def async_get_data(self) -&gt; None:\n    \"\"\"Update the in-memory state using data from the ExoyOne.\"\"\"\n    try:\n        stream: DatagramClient = await connect((self._host, self._port))\n        await asyncio.wait_for(stream.send(b'{\"getData\": 1}'), timeout=self.TIMEOUT)\n        reply, _ = await asyncio.wait_for(stream.recv(), timeout=self.TIMEOUT)\n        data = json.loads(reply.decode(\"utf-8\"))\n        self._state = ExoyOneState(**data)\n    except TimeoutError as exc:\n        raise ExoyOneTimeoutError() from exc\n    finally:\n        stream.close()\n        del stream\n</code></pre>"},{"location":"library/#exoyone.exoyone.ExoyOne.async_get_state","title":"<code>async_get_state()</code>  <code>async</code>","text":"<p>Return the current state as an ExoyOne object.</p> Source code in <code>src/exoyone/exoyone.py</code> <pre><code>async def async_get_state(self) -&gt; ExoyOneState:\n    \"\"\"Return the current state as an ExoyOne object.\"\"\"\n    await self.async_get_data()\n    return self._state\n</code></pre>"},{"location":"library/#exoyone.exoyone.ExoyOne.async_set_data","title":"<code>async_set_data(request)</code>  <code>async</code>","text":"<p>Update a setting on the ExoyOne, then get the latest state data.</p> Source code in <code>src/exoyone/exoyone.py</code> <pre><code>@backoff.on_exception(\n    backoff.expo,\n    ExoyOneTimeoutError,\n    max_tries=3,\n    logger=_LOGGER,\n    backoff_log_level=logging.DEBUG,\n)\nasync def async_set_data(\n    self, request: Mapping[str, Mapping[str, int | str] | bool | int | str]\n) -&gt; None:\n    \"\"\"Update a setting on the ExoyOne, then get the latest state data.\"\"\"\n    encoded_update = json.dumps(request).encode(\"utf-8\")\n    try:\n        stream: DatagramClient = await connect((self._host, self._port))\n        await asyncio.wait_for(stream.send(encoded_update), timeout=self.TIMEOUT)\n    except TimeoutError as exc:\n        raise ExoyOneTimeoutError() from exc\n    finally:\n        stream.close()\n        del stream\n        await self.async_get_data()\n</code></pre>"},{"location":"library/#exoyone.exoyone.ExoyOne.connect_to_wifi","title":"<code>connect_to_wifi(ssid, password)</code>  <code>async</code>","text":"<p>Set new Wi-Fi connection credentials.</p> Source code in <code>src/exoyone/exoyone.py</code> <pre><code>async def connect_to_wifi(self, ssid: str, password: str) -&gt; None:\n    \"\"\"Set new Wi-Fi connection credentials.\"\"\"\n    if len(ssid) == 0 or len(password) == 0:\n        raise ExoyOneValueError(\n            \"Both SSID and password must be set to change WiFi credentials\"\n        )\n    if len(ssid) &gt; 31:\n        raise ExoyOneValueError(\n            \"SSID is longer than maximum allowed length of 31 characters\"\n        )\n    if len(password) &gt; 31:\n        raise ExoyOneValueError(\n            \"Password is longer than the maximum allowed length of 31 characters\"\n        )\n\n    await self.async_set_data(\n        {\"connectToWifi\": {\"ssid\": ssid, \"password\": password}}\n    )\n</code></pre>"},{"location":"library/#exoyone.exoyone.ExoyOne.get_active_effect","title":"<code>get_active_effect()</code>","text":"<p>Return the name of the currently active effect.</p> Source code in <code>src/exoyone/exoyone.py</code> <pre><code>def get_active_effect(self) -&gt; str:\n    \"\"\"Return the name of the currently active effect.\"\"\"\n    return self._mp.get_effect_name_from_index(\n        pack_index=self._state.currentModpack,\n        effect_index=self._state.modeIndex,\n    )\n</code></pre>"},{"location":"library/#exoyone.exoyone.ExoyOne.get_active_pack_name","title":"<code>get_active_pack_name()</code>","text":"<p>Return the name of the currently active modpack.</p> Source code in <code>src/exoyone/exoyone.py</code> <pre><code>def get_active_pack_name(self) -&gt; str:\n    \"\"\"Return the name of the currently active modpack.\"\"\"\n    return self._mp.get_pack_name_from_index(self._state.currentModpack)\n</code></pre>"},{"location":"library/#exoyone.exoyone.ExoyOne.powered_by_powerbank","title":"<code>powered_by_powerbank(state)</code>  <code>async</code>","text":"<p>Toggle power consumption reduction when running on batteries.</p> Source code in <code>src/exoyone/exoyone.py</code> <pre><code>async def powered_by_powerbank(self, state: bool | int | str) -&gt; None:\n    \"\"\"Toggle power consumption reduction when running on batteries.\"\"\"\n    request = {\"poweredByPowerbank\": self._bool_val(state)}\n    await self.async_set_data(request)\n</code></pre>"},{"location":"library/#exoyone.exoyone.ExoyOne.restart_in_ap_mode","title":"<code>restart_in_ap_mode()</code>  <code>async</code>","text":"<p>Restart the device in AP mode.</p> Source code in <code>src/exoyone/exoyone.py</code> <pre><code>async def restart_in_ap_mode(self) -&gt; None:\n    \"\"\"Restart the device in AP mode.\"\"\"\n    await self.async_set_data({\"restartInApMode\": True})\n</code></pre>"},{"location":"library/#exoyone.exoyone.ExoyOne.set_brightness","title":"<code>set_brightness(brightness)</code>  <code>async</code>","text":"<p>Set the brightness.</p> Source code in <code>src/exoyone/exoyone.py</code> <pre><code>async def set_brightness(self, brightness: int) -&gt; None:\n    \"\"\"Set the brightness.\"\"\"\n    await self._async_set_hsbs(key=\"setBrightness\", value=brightness)\n</code></pre>"},{"location":"library/#exoyone.exoyone.ExoyOne.set_color","title":"<code>set_color(hsb)</code>  <code>async</code>","text":"<p>Set the hue, saturation and brightness in a single call.</p> Source code in <code>src/exoyone/exoyone.py</code> <pre><code>async def set_color(self, hsb: tuple[int, int, int]) -&gt; None:\n    \"\"\"Set the hue, saturation and brightness in a single call.\"\"\"\n    hue = max(0, min(hsb[0], 255))\n    saturation = max(0, min(hsb[1], 255))\n    brightness = max(0, min(hsb[2], 255))\n    await self.async_set_data(\n        {\n            \"setHue\": hue,\n            \"setSaturation\": saturation,\n            \"setBrightness\": brightness,\n        }\n    )\n</code></pre>"},{"location":"library/#exoyone.exoyone.ExoyOne.set_color_mode","title":"<code>set_color_mode(value)</code>  <code>async</code>","text":"<p>Use async_set_data to change the selectedColorMode value.</p> Source code in <code>src/exoyone/exoyone.py</code> <pre><code>async def set_color_mode(self, value: int) -&gt; None:\n    \"\"\"Use async_set_data to change the selectedColorMode value.\"\"\"\n    await self.async_set_data({\"setColorMode\": value})\n</code></pre>"},{"location":"library/#exoyone.exoyone.ExoyOne.set_cycle_speed","title":"<code>set_cycle_speed(cycle_speed)</code>  <code>async</code>","text":"<p>Set cycle speed in seconds.</p> Source code in <code>src/exoyone/exoyone.py</code> <pre><code>async def set_cycle_speed(self, cycle_speed: int) -&gt; None:\n    \"\"\"Set cycle speed in seconds.\"\"\"\n    await self.async_set_data({\"setCycleSpeed\": cycle_speed})\n</code></pre>"},{"location":"library/#exoyone.exoyone.ExoyOne.set_effect","title":"<code>set_effect(effect)</code>  <code>async</code>","text":"<p>Set mode mode_pack and effect.</p> Source code in <code>src/exoyone/exoyone.py</code> <pre><code>async def set_effect(self, effect: str | tuple[int, int]) -&gt; None:\n    \"\"\"Set mode mode_pack and effect.\"\"\"\n    if isinstance(effect, str):\n        pack_index, effect_index = self._mp.get_indices_from_effect_name(effect)\n    else:\n        pack_index, effect_index = effect\n\n    if pack_index &gt; -1 and effect_index &gt; -1:\n        await self.async_set_data(\n            {\n                \"setModPack\": pack_index,\n                \"setEffect\": effect_index,\n            }\n        )\n</code></pre>"},{"location":"library/#exoyone.exoyone.ExoyOne.set_hue","title":"<code>set_hue(hue)</code>  <code>async</code>","text":"<p>Set the hue.</p> Source code in <code>src/exoyone/exoyone.py</code> <pre><code>async def set_hue(self, hue: int) -&gt; None:\n    \"\"\"Set the hue.\"\"\"\n    await self._async_set_hsbs(key=\"setHue\", value=hue)\n</code></pre>"},{"location":"library/#exoyone.exoyone.ExoyOne.set_name","title":"<code>set_name(name)</code>  <code>async</code>","text":"<p>Set a new user-friendly name.</p> Source code in <code>src/exoyone/exoyone.py</code> <pre><code>async def set_name(self, name: str) -&gt; None:\n    \"\"\"Set a new user-friendly name.\"\"\"\n    if len(name) &gt; 39:\n        name = name[:39]\n        _LOGGER.warning(\"Name truncated to maximum allowed length: %s\", name[:39])\n    await self.async_set_data({\"setName\": name})\n</code></pre>"},{"location":"library/#exoyone.exoyone.ExoyOne.set_palette","title":"<code>set_palette(value)</code>  <code>async</code>","text":"<p>Use async_set_data to change the selectedPalette value.</p> Source code in <code>src/exoyone/exoyone.py</code> <pre><code>async def set_palette(self, value: int) -&gt; None:\n    \"\"\"Use async_set_data to change the selectedPalette value.\"\"\"\n    await self.async_set_data({\"setPalette\": value})\n</code></pre>"},{"location":"library/#exoyone.exoyone.ExoyOne.set_pattern","title":"<code>set_pattern(value)</code>  <code>async</code>","text":"<p>Use async_set_data to change the selectedPattern value.</p> Source code in <code>src/exoyone/exoyone.py</code> <pre><code>async def set_pattern(self, value: int) -&gt; None:\n    \"\"\"Use async_set_data to change the selectedPattern value.\"\"\"\n    await self.async_set_data({\"setPattern\": value})\n</code></pre>"},{"location":"library/#exoyone.exoyone.ExoyOne.set_render_mode","title":"<code>set_render_mode(value)</code>  <code>async</code>","text":"<p>Use async_set_data to change the selectedRenderMode value.</p> Source code in <code>src/exoyone/exoyone.py</code> <pre><code>async def set_render_mode(self, value: int) -&gt; None:\n    \"\"\"Use async_set_data to change the selectedRenderMode value.\"\"\"\n    await self.async_set_data({\"setRenderMode\": value})\n</code></pre>"},{"location":"library/#exoyone.exoyone.ExoyOne.set_saturation","title":"<code>set_saturation(saturation)</code>  <code>async</code>","text":"<p>Set the saturation.</p> Source code in <code>src/exoyone/exoyone.py</code> <pre><code>async def set_saturation(self, saturation: int) -&gt; None:\n    \"\"\"Set the saturation.\"\"\"\n    await self._async_set_hsbs(key=\"setSaturation\", value=saturation)\n</code></pre>"},{"location":"library/#exoyone.exoyone.ExoyOne.set_shutdown_timer","title":"<code>set_shutdown_timer(minutes)</code>  <code>async</code>","text":"<p>Set a shutdown timer of at least 5 and at most 480 minutes.</p> Source code in <code>src/exoyone/exoyone.py</code> <pre><code>async def set_shutdown_timer(self, minutes: int) -&gt; None:\n    \"\"\"Set a shutdown timer of at least 5 and at most 480 minutes.\"\"\"\n    if minutes == 0:\n        _LOGGER.info(\"Disabling shutdown timer.\")\n\n    elif 1 &lt; minutes &lt; 5:\n        _LOGGER.info(\"Shutdown timer increased to 5 minutes.\")\n        minutes = 5\n\n    if minutes &gt; 480:\n        _LOGGER.info(\"Shutdown timer reduced to 8 hours.\")\n        minutes = 480\n\n    hours: int = 0\n    if minutes &gt; 60:\n        hours = minutes // 60\n        minutes = minutes % 60\n\n    await self.async_set_data(\n        {\"setShutdownTimer\": {\"hours\": hours, \"minutes\": minutes}}\n    )\n</code></pre>"},{"location":"library/#exoyone.exoyone.ExoyOne.set_speed","title":"<code>set_speed(speed)</code>  <code>async</code>","text":"<p>Set the speed.</p> Source code in <code>src/exoyone/exoyone.py</code> <pre><code>async def set_speed(self, speed: int) -&gt; None:\n    \"\"\"Set the speed.\"\"\"\n    await self._async_set_hsbs(key=\"setSpeed\", value=speed)\n</code></pre>"},{"location":"library/#exoyone.exoyone.ExoyOne.toggle_direction","title":"<code>toggle_direction(state)</code>  <code>async</code>","text":"<p>Toggle direction.</p> Source code in <code>src/exoyone/exoyone.py</code> <pre><code>async def toggle_direction(self, state: bool | int | str) -&gt; None:\n    \"\"\"Toggle direction.\"\"\"\n    request = {\"toggleDirection\": self._bool_val(state)}\n    await self.async_set_data(request)\n</code></pre>"},{"location":"library/#exoyone.exoyone.ExoyOne.toggle_mode_cycle","title":"<code>toggle_mode_cycle(state)</code>  <code>async</code>","text":"<p>Toggle automatic mode change after set interval.</p> Source code in <code>src/exoyone/exoyone.py</code> <pre><code>async def toggle_mode_cycle(self, state: bool | int | str) -&gt; None:\n    \"\"\"Toggle automatic mode change after set interval.\"\"\"\n    request = {\"toggleModeCycle\": self._bool_val(state)}\n    await self.async_set_data(request)\n</code></pre>"},{"location":"library/#exoyone.exoyone.ExoyOne.toggle_music_sync","title":"<code>toggle_music_sync(state)</code>  <code>async</code>","text":"<p>Toggle music sync.</p> Source code in <code>src/exoyone/exoyone.py</code> <pre><code>async def toggle_music_sync(self, state: bool | int | str) -&gt; None:\n    \"\"\"Toggle music sync.\"\"\"\n    request = {\"toggleMusicSync\": self._bool_val(state)}\n    await self.async_set_data(request)\n</code></pre>"},{"location":"library/#exoyone.exoyone.ExoyOne.toggle_power","title":"<code>toggle_power(state)</code>  <code>async</code>","text":"<p>Toggle power.</p> Source code in <code>src/exoyone/exoyone.py</code> <pre><code>async def toggle_power(self, state: bool | int | str) -&gt; None:\n    \"\"\"Toggle power.\"\"\"\n    request = {\"togglePower\": self._bool_val(state)}\n    await self.async_set_data(request)\n</code></pre>"},{"location":"library/#exoyone.exoyone.ExoyOne.toggle_scene_generation","title":"<code>toggle_scene_generation(state)</code>  <code>async</code>","text":"<p>Toggle scene generation.</p> Source code in <code>src/exoyone/exoyone.py</code> <pre><code>async def toggle_scene_generation(self, state: bool | int | str) -&gt; None:\n    \"\"\"Toggle scene generation.\"\"\"\n    request = {\"toggleSceneGeneration\": self._bool_val(state)}\n    await self.async_set_data(request)\n</code></pre>"}]}